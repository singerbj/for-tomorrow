# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
    # Triggers the workflow on push or pull request events but only for the master branch
    push:
        branches: [master]
    pull_request:
        branches: [master]

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

env:
    GODOT_VERSION: 3.2.2
    EXPORT_NAME: for-tomorrow

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    export-linux:
        name: Linux Export
        runs-on: ubuntu-latest
        container:
            image: docker://barichello/godot-ci:3.2.2
            options: -v /home/runner/.ssh:/home/user/.ssh:rw # probs delete this and just do password auth or something####################################################
        steps:
            - name: Checkout
              uses: actions/checkout@v1
            - name: Setup
              run: |
                ./setup_dev.sh
                mkdir -v -p ./server/build/linux ./server/build/windows ./server/build/mac ./server/build/web
                mkdir -v -p ./client/build/linux ./client/build/windows ./client/build/mac ./client/build/web
                mkdir -v -p ~/.local/share/godot/templates
                mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
            - name: Linux Build
              run: |
                godot -v --path ./client --export "Linux/X11" ./build/linux/$EXPORT_NAME-client.x86_64
                godot -v --path ./server --export "Linux/X11" ./build/linux/$EXPORT_NAME-server.x86_64
            - name: Upload Client Artifact
              uses: actions/upload-artifact@v1
              with:
                name: linux-client 
                path: ./client/build/linux/
            - name: Upload Server Artifact
              uses: actions/upload-artifact@v1
              with:
                name: linux-server
                path: ./server/build/linux/
            
    export-windows:
        name: Windows Export
        runs-on: ubuntu-latest
        container:
            image: docker://barichello/godot-ci:3.2.2
        steps:
            - name: Checkout
              uses: actions/checkout@v1
            - name: Setup
              run: |
               ./setup_dev.sh
                mkdir -v -p ./server/build/linux ./server/build/windows ./server/build/mac ./server/build/web
                mkdir -v -p ./client/build/linux ./client/build/windows ./client/build/mac ./client/build/web
                mkdir -v -p ~/.local/share/godot/templates
                mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
            - name: Windows Build
              run: |
                godot -v --path ./client --export "Windows Desktop" ./build/windows/$EXPORT_NAME-client.exe
                godot -v --path ./server --export "Windows Desktop" ./build/windows/$EXPORT_NAME-server.exe
            - name: Upload Client Artifact
              uses: actions/upload-artifact@v1
              with:
                name: windows-client
                path: ./client/build/windows/
            - name: Upload Server Artifact
              uses: actions/upload-artifact@v1
              with:
                name: windows-server
                path: ./server/build/windows/
            
    export-mac:
        name: Mac Export
        runs-on: ubuntu-latest
        container:
            image: docker://barichello/godot-ci:3.2.2
        steps:
            - name: Checkout
              uses: actions/checkout@v1
            - name: Setup
              run: |
                ./setup_dev.sh
                mkdir -v -p ./server/build/linux ./server/build/windows ./server/build/mac ./server/build/web
                mkdir -v -p ./client/build/linux ./client/build/windows ./client/build/mac ./client/build/web
                mkdir -v -p ~/.local/share/godot/templates
                mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
            - name: Mac Build
              run: |
                godot -v --path ./client --export "Mac OSX" ./build/mac/$EXPORT_NAME-client.zip
                godot -v --path ./server --export "Mac OSX" ./build/mac/$EXPORT_NAME-server.zip
            - name: Upload Client Artifact
              uses: actions/upload-artifact@v1
              with:
                name: mac-client
                path: ./client/build/mac/
            - name: Upload Server Artifact
              uses: actions/upload-artifact@v1
              with:
                name: mac-server
                path: ./server/build/mac/

    deploy-to-digital-ocean:
        name: Deploy To Digital Ocean
        runs-on: ubuntu-latest
        needs: export-linux
        steps:
            - name: Download Server Executable
              uses: actions/download-artifact@v2
              with:
                name: linux-server
            - name: Print Directory Contents
              run: |
                pwd
                ls -al
                tree
            - name: Stop Current Server on Digital Ocean VM
              uses: appleboy/ssh-action@master
              with:
                host: ${{ secrets.DIGITAL_OCEAN_IP }}
                username: ${{ secrets.DIGITAL_OCEAN_USERNAME }}
                key: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}
                port: ${{ secrets.DIGITAL_OCEAN_PORT }}
                script: |
                  sudo systemctl stop for-tomorrow
            - name: Copy Server Executable to Digital Ocean VM
              uses: appleboy/scp-action@master
              with:
                host: ${{ secrets.DIGITAL_OCEAN_IP }}
                username: ${{ secrets.DIGITAL_OCEAN_USERNAME }}
                key: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}
                port: ${{ secrets.DIGITAL_OCEAN_PORT }}
                source: "for-tomorrow-server.x86_64,for-tomorrow-server.pck"
                target: "/root/"
            - name: Run Server on Digital Ocean VM
              uses: appleboy/ssh-action@master
              with:
                host: ${{ secrets.DIGITAL_OCEAN_IP }}
                username: ${{ secrets.DIGITAL_OCEAN_USERNAME }}
                key: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}
                port: ${{ secrets.DIGITAL_OCEAN_PORT }}
                script: |
                  sudo systemctl start for-tomorrow
                  


